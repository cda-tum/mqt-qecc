from __future__ import annotations

import typing

class Code:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: str) -> None: ...
    @typing.overload
    def __init__(self, arg0: str, arg1: str) -> None: ...
    @typing.overload
    def __init__(self, arg0: list[list[bool]]) -> None: ...
    @typing.overload
    def __init__(self, arg0: list[list[bool]], arg1: list[list[bool]]) -> None: ...
    def __repr__(self) -> str: ...
    def get_hx(self) -> list[list[bool]]: ...
    def get_hz(self) -> list[list[bool]]: ...
    def get_syndrome(self, arg0: list[bool], arg1: list[bool]) -> list[bool]: ...
    def get_x_syndrome(self, arg0: list[bool]) -> list[bool]: ...
    @typing.overload
    def is_stabilizer(self, arg0: list[bool]) -> bool: ...
    @typing.overload
    def is_stabilizer(self, arg0: list[bool], arg1: list[bool]) -> bool: ...
    def is_x_stabilizer(self, arg0: list[bool]) -> bool: ...
    def json(self) -> dict[str, typing.Any]: ...
    def set_hxx(self, arg0: list[list[bool]]) -> None: ...
    def set_hz(self, arg0: list[list[bool]]) -> None: ...
    @property
    def d(self) -> int: ...
    @d.setter
    def d(self, arg0: int) -> None: ...
    @property
    def k(self) -> int: ...
    @k.setter
    def k(self, arg0: int) -> None: ...
    @property
    def n(self) -> int: ...
    @n.setter
    def n(self, arg0: int) -> None: ...

class Decoder:
    def __init__(self) -> None: ...
    def decode(self, arg0: list[bool]) -> None: ...
    def set_code(self, arg0: Code) -> None: ...
    def set_growth(self, arg0: GrowthVariant) -> None: ...
    @property
    def growth(self) -> GrowthVariant: ...
    @growth.setter
    def growth(self, arg0: GrowthVariant) -> None: ...
    @property
    def result(self) -> DecodingResult: ...
    @result.setter
    def result(self, arg0: DecodingResult) -> None: ...

class DecoderType:
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    @typing.overload
    def __init__(self, arg0: str) -> None: ...
    @typing.overload
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

    ORIGINAL_UF: DecoderType  # value = <DecoderType.ORIGINAL_UF: 1>
    UF_HEURISTIC: DecoderType  # value = <DecoderType.UF_HEURISTIC: 0>
    __members__: dict[
        str, DecoderType
    ]  # value = {'UF_HEURISTIC': <DecoderType.UF_HEURISTIC: 0>, 'ORIGINAL_UF': <DecoderType.ORIGINAL_UF: 1>}
    pass

class DecodingResult:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def json(self) -> dict[str, typing.Any]: ...
    @property
    def decoding_time(self) -> int: ...
    @decoding_time.setter
    def decoding_time(self, arg0: int) -> None: ...
    @property
    def estim_vec_idxs(self) -> list[int]: ...
    @estim_vec_idxs.setter
    def estim_vec_idxs(self, arg0: list[int]) -> None: ...
    @property
    def estimate(self) -> list[bool]: ...
    @estimate.setter
    def estimate(self, arg0: list[bool]) -> None: ...

class DecodingResultStatus:
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    @typing.overload
    def __init__(self, arg0: str) -> None: ...
    @typing.overload
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

    ALL_COMPONENTS: DecodingResultStatus  # value = <DecodingResultStatus.ALL_COMPONENTS: 0>
    INVALID_COMPONENTS: DecodingResultStatus  # value = <DecodingResultStatus.INVALID_COMPONENTS: 1>
    __members__: dict[
        str, DecodingResultStatus
    ]  # value = {'ALL_COMPONENTS': <DecodingResultStatus.ALL_COMPONENTS: 0>, 'INVALID_COMPONENTS': <DecodingResultStatus.INVALID_COMPONENTS: 1>}

class DecodingRunInformation:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, arg0: float, arg1: int, arg2: list[bool], arg3: list[bool], arg4: DecodingResult) -> None: ...
    @typing.overload
    def __init__(
        self,
        arg0: float,
        arg1: int,
        arg2: list[bool],
        arg3: list[bool],
        arg4: DecodingResultStatus,
        arg5: DecodingResult,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def json(self) -> dict[str, typing.Any]: ...
    @property
    def code_size(self) -> int: ...
    @code_size.setter
    def code_size(self, arg0: int) -> None: ...
    @property
    def error(self) -> list[bool]: ...
    @error.setter
    def error(self, arg0: list[bool]) -> None: ...
    @property
    def physical_err_r(self) -> float: ...
    @physical_err_r.setter
    def physical_err_r(self, arg0: float) -> None: ...
    @property
    def result(self) -> DecodingResult: ...
    @result.setter
    def result(self, arg0: DecodingResult) -> None: ...
    @property
    def status(self) -> DecodingResultStatus: ...
    @status.setter
    def status(self, arg0: DecodingResultStatus) -> None: ...
    @property
    def syndrome(self) -> list[bool]: ...
    @syndrome.setter
    def syndrome(self, arg0: list[bool]) -> None: ...

class DecodingSimulator:
    def __init__(self) -> None: ...
    def simulate_avg_runtime(
        self, arg0: str, arg1: float, arg2: int, arg3: str, arg4: int, arg5: DecoderType
    ) -> None: ...
    def simulate_wer(
        self, arg0: str, arg1: float, arg2: float, arg3: int, arg4: Code, arg5: float, arg6: DecoderType
    ) -> None: ...

class GrowthVariant:
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    @typing.overload
    def __init__(self, arg0: str) -> None: ...
    @typing.overload
    def __init__(self, value: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

    ALL_COMPONENTS: GrowthVariant  # value = <GrowthVariant.ALL_COMPONENTS: 0>
    INVALID_COMPONENTS: GrowthVariant  # value = <GrowthVariant.INVALID_COMPONENTS: 1>
    SINGLE_QUBIT_RANDOM: GrowthVariant  # value = <GrowthVariant.SINGLE_QUBIT_RANDOM: 4>
    SINGLE_RANDOM: GrowthVariant  # value = <GrowthVariant.SINGLE_RANDOM: 3>
    SINGLE_SMALLEST: GrowthVariant  # value = <GrowthVariant.SINGLE_SMALLEST: 2>
    __members__: dict[
        str, GrowthVariant
    ]  # value = {'ALL_COMPONENTS': <GrowthVariant.ALL_COMPONENTS: 0>, 'INVALID_COMPONENTS': <GrowthVariant.INVALID_COMPONENTS: 1>, 'SINGLE_SMALLEST': <GrowthVariant.SINGLE_SMALLEST: 2>, 'SINGLE_RANDOM': <GrowthVariant.SINGLE_RANDOM: 3>, 'SINGLE_QUBIT_RANDOM': <GrowthVariant.SINGLE_QUBIT_RANDOM: 4>}
    pass

class UFDecoder(Decoder):
    def __init__(self) -> None: ...
    def decode(self, arg0: list[bool]) -> None: ...
    @property
    def growth(self) -> GrowthVariant: ...
    @growth.setter
    def growth(self, arg0: GrowthVariant) -> None: ...
    @property
    def result(self) -> DecodingResult: ...
    @result.setter
    def result(self, arg0: DecodingResult) -> None: ...

class UFHeuristic(Decoder):
    def __init__(self) -> None: ...
    def decode(self, arg0: list[bool]) -> None: ...
    def reset(self) -> None: ...
    @property
    def growth(self) -> GrowthVariant: ...
    @growth.setter
    def growth(self, arg0: GrowthVariant) -> None: ...
    @property
    def result(self) -> DecodingResult: ...
    @result.setter
    def result(self, arg0: DecodingResult) -> None: ...

def apply_ecc(circuit_name: object, ecc_name: str, ecc_frequency: int = 100) -> dict[typing.Any, typing.Any]: ...
def sample_iid_pauli_err(arg0: int, arg1: float) -> list[bool]: ...

ALL_COMPONENTS: DecodingResultStatus  # value = <DecodingResultStatus.ALL_COMPONENTS: 0>
INVALID_COMPONENTS: DecodingResultStatus  # value = <DecodingResultStatus.INVALID_COMPONENTS: 1>
ORIGINAL_UF: DecoderType  # value = <DecoderType.ORIGINAL_UF: 1>
SINGLE_QUBIT_RANDOM: GrowthVariant  # value = <GrowthVariant.SINGLE_QUBIT_RANDOM: 4>
SINGLE_RANDOM: GrowthVariant  # value = <GrowthVariant.SINGLE_RANDOM: 3>
SINGLE_SMALLEST: GrowthVariant  # value = <GrowthVariant.SINGLE_SMALLEST: 2>
UF_HEURISTIC: DecoderType  # value = <DecoderType.UF_HEURISTIC: 0>
__version__ = "1.2.2.dev61+gdd1da90.d20230324"
