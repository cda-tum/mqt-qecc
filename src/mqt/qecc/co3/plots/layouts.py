"""Construct Example Layouts for Numerical Evaluation."""

from __future__ import annotations

import random

import networkx as nx

import mqt.qecc.co3 as co

random.seed(45)


def filter_factory_nodes(
    g: nx.Graph, factory_ring: list[tuple[int, int]], factories: list[tuple[int, int]]
) -> tuple[nx.Graph, set[tuple[int, int]], set[tuple[int, int]]]:
    """Filter ancillas from factory_ring which should be kept in the graph considering the included factories.

    Note that one should place the factories in a suitable way such that they are not weirdly connected.

    Args:
        g (nx.Graph): Graph of the Layout
        factory_ring (list[tuple[int,int]]): Locations at the boundary where factories are allowed in principle.
        factories (list[tuple[int,int]]): factory positions.

    Returns:
        tuple[nx.Graph, set, set]: graph with reduced ancillas, kept nodes, nodes_to_dsicard
    """
    kept_nodes = set()

    for el in factories:
        assert el in factory_ring, "A factory is placed outside the factory ring which is not allowed"

    cycles = list(nx.simple_cycles(g, length_bound=6))  # only hexagons
    for node in factories:
        # add the least amount of qubits to get a full cycle
        possible_cycles = [
            set(cycle) & set(factory_ring) for cycle in cycles if node in list(cycle) and len(list(cycle)) == 6
        ]
        if possible_cycles:
            best_cycle_part = min(possible_cycles, key=len)
            kept_nodes.update(best_cycle_part)

    # for node in factories:
    #    for neighbor in g.neighbors(node):
    #        if neighbor in factory_ring:  # Check only within the factory ring
    #            # Check if this neighbor has at least one neighbor outside the factory ring
    #            if any(n not in factory_ring for n in g.neighbors(neighbor)):
    #                kept_nodes.add(neighbor)
    #            else:
    #                nodes_to_remove.add(neighbor)

    nodes_to_discard = set(factory_ring) - kept_nodes - set(factories)
    g.remove_nodes_from(nodes_to_discard)

    return g, kept_nodes, nodes_to_discard


def gen_layout(
    layout_type: str, num_qubits: int, factories: list[tuple[int, int]]
) -> tuple[nx.Graph, list[tuple[int, int]], list[tuple[int, int]]]:
    """Generates a Layout which does not suit the standard `rectangular` basic shape from networkx.hexagonal graph.

    # ! TODO automatize also these constructions.

    Args:
        layout_type (str): hexagonal, row, etc.
        num_qubits (int): number of qubits
        factories (list): Positions of factories of the respective factory_ring.

    Returns:
        tuple[nx.Graph, list, list]: adapted graph, data_qubit_locs, factory_ring
    """
    assert layout_type in {"row", "sparse", "pair", "hex"}, "Wrong Layout type!"
    assert num_qubits in {24, 42, 60}, "The layouts are only defined for a few number of qubits."
    data_qubit_locs: list[tuple[int, int]]

    if layout_type == "hex":
        if num_qubits == 24:
            m = 8
            n = 9
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 4),
                (3, 4),
                (3, 5),
                (3, 6),
                (2, 6),
                (2, 5),
                (5, 5),
                (6, 5),
                (6, 6),
                (6, 7),
                (5, 7),
                (5, 6),
                (3, 9),
                (3, 10),
                (3, 11),
                (4, 9),
                (4, 10),
                (4, 11),
                (6, 10),
                (6, 11),
                (6, 12),
                (7, 10),
                (7, 11),
                (7, 12),
            ]
            factory_ring = [
                (0, 2),
                (0, 3),
                (0, 4),
                (0, 5),
                (0, 6),
                (0, 7),
                (0, 8),
                (1, 8),
                (1, 9),
                (1, 10),
                (1, 11),
                (1, 12),
                (1, 13),
                (2, 13),
                (2, 14),
                (3, 14),
                (3, 15),
                (4, 15),
                (4, 14),
                (5, 14),
                (5, 15),
                (6, 15),
                (6, 16),
                (7, 16),
                (7, 15),
                (8, 15),
                (8, 14),
                (9, 14),
                (9, 13),
                (9, 12),
                (9, 11),
                (9, 10),
                (9, 9),
                (9, 8),
                (8, 8),
                (8, 7),
                (8, 6),
                (8, 5),
                (8, 4),
                (8, 3),
                (7, 3),
                (7, 2),
                (6, 2),
                (6, 1),
                (5, 1),
                (5, 2),
                (4, 2),
                (4, 1),
                (3, 1),
                (3, 0),
                (2, 0),
                (2, 1),
                (1, 1),
                (1, 2),
            ]
            # nodes to remove, but keeping the factory ring
            nodes_to_remove = [
                (0, 0),
                (0, 1),
                (1, 0),
                (0, 9),
                (0, 10),
                (0, 11),
                (0, 12),
                (0, 13),
                (0, 14),
                (0, 15),
                (0, 16),
                (1, 14),
                (1, 15),
                (1, 16),
                (1, 17),
                (2, 15),
                (2, 16),
                (2, 17),
                (3, 16),
                (3, 17),
                (4, 16),
                (4, 17),
                (5, 16),
                (5, 17),
                (6, 17),
                (7, 17),
                (8, 17),
                (8, 16),
                (9, 16),
                (9, 15),
                (4, 0),
                (5, 0),
                (6, 0),
                (7, 0),
                (7, 1),
                (8, 0),
                (8, 1),
                (8, 2),
                (9, 0),
                (9, 1),
                (9, 2),
                (9, 3),
                (9, 4),
                (9, 5),
                (9, 6),
                (9, 7),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g

        elif num_qubits == 42:
            m = 10
            n = 12
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 4),
                (2, 5),
                (2, 6),
                (3, 4),
                (3, 5),
                (3, 6),
                (5, 5),
                (5, 6),
                (5, 7),
                (6, 5),
                (6, 6),
                (6, 7),
                (8, 6),
                (8, 7),
                (8, 9),
                (9, 6),
                (9, 7),
                (9, 8),
                (3, 9),
                (3, 10),
                (3, 11),
                (4, 9),
                (4, 10),
                (4, 11),
                (6, 10),
                (6, 11),
                (6, 12),
                (7, 10),
                (7, 11),
                (7, 12),
                (9, 11),
                (9, 12),
                (9, 13),
                (10, 11),
                (10, 12),
                (10, 13),
                (4, 14),
                (4, 15),
                (4, 16),
                (5, 14),
                (5, 15),
                (5, 16),
            ]
            factory_ring = [
                (0, 2),
                (0, 3),
                (0, 4),
                (0, 5),
                (0, 6),
                (0, 7),
                (0, 8),
                (1, 8),
                (1, 9),
                (1, 10),
                (1, 11),
                (1, 12),
                (1, 13),
                (2, 13),
                (2, 14),
                (2, 15),
                (2, 16),
                (2, 17),
                (2, 18),
                (3, 18),
                (3, 19),
                (4, 19),
                (4, 20),
                (5, 20),
                (5, 19),
                (6, 19),
                (6, 18),
                (7, 17),
                (7, 18),
                (7, 16),
                (7, 15),
                (8, 15),
                (8, 16),
                (9, 16),
                (9, 17),
                (10, 17),
                (10, 16),
                (11, 16),
                (11, 15),
                (12, 15),
                (12, 14),
                (12, 13),
                (12, 12),
                (12, 11),
                (12, 10),
                (12, 9),
                (11, 9),
                (11, 8),
                (11, 7),
                (11, 6),
                (11, 5),
                (11, 4),
                (10, 4),
                (10, 3),
                (9, 3),
                (9, 2),
                (8, 2),
                (8, 3),
                (7, 3),
                (7, 2),
                (6, 2),
                (6, 1),
                (5, 1),
                (5, 2),
                (4, 2),
                (4, 1),
                (3, 1),
                (3, 0),
                (2, 0),
                (2, 1),
                (1, 1),
                (1, 2),
            ]
            nodes_to_remove = [
                (0, 1),
                (0, 0),
                (1, 0),
                (0, 9),
                (0, 10),
                (0, 11),
                (0, 12),
                (0, 13),
                (0, 14),
                (0, 15),
                (0, 16),
                (0, 17),
                (0, 18),
                (0, 19),
                (0, 20),
                (1, 14),
                (1, 15),
                (1, 16),
                (1, 17),
                (1, 18),
                (1, 19),
                (1, 19),
                (1, 20),
                (1, 21),
                (2, 19),
                (2, 20),
                (2, 21),
                (3, 20),
                (3, 21),
                (4, 21),
                (5, 21),
                (6, 20),
                (6, 21),
                (7, 19),
                (7, 20),
                (7, 21),
                (8, 17),
                (8, 18),
                (8, 19),
                (8, 20),
                (8, 21),
                (9, 18),
                (9, 19),
                (9, 20),
                (9, 21),
                (10, 18),
                (10, 19),
                (10, 20),
                (10, 21),
                (11, 17),
                (11, 18),
                (11, 19),
                (11, 20),
                (11, 21),
                (12, 16),
                (12, 17),
                (12, 18),
                (12, 19),
                (12, 20),
                (12, 21),
                (12, 8),
                (12, 7),
                (12, 6),
                (12, 5),
                (12, 4),
                (12, 3),
                (12, 2),
                (12, 1),
                (11, 3),
                (11, 2),
                (11, 1),
                (11, 0),
                (10, 2),
                (10, 1),
                (10, 0),
                (9, 0),
                (9, 1),
                (8, 0),
                (8, 1),
                (7, 0),
                (7, 1),
                (6, 0),
                (5, 0),
                (4, 0),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g

        elif num_qubits == 60:
            m = 12
            n = 13
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 4),
                (2, 5),
                (2, 6),
                (3, 4),
                (3, 5),
                (3, 6),
                (5, 5),
                (5, 6),
                (5, 7),
                (6, 5),
                (6, 6),
                (6, 7),
                (8, 6),
                (8, 7),
                (8, 9),
                (9, 6),
                (9, 7),
                (9, 8),
                (3, 9),
                (3, 10),
                (3, 11),
                (4, 9),
                (4, 10),
                (4, 11),
                (6, 10),
                (6, 11),
                (6, 12),
                (7, 10),
                (7, 11),
                (7, 12),
                (9, 11),
                (9, 12),
                (9, 13),
                (10, 11),
                (10, 12),
                (10, 13),
                (4, 14),
                (4, 15),
                (4, 16),
                (5, 14),
                (5, 15),
                (5, 16),
                (7, 15),
                (7, 16),
                (7, 17),
                (8, 17),
                (8, 16),
                (8, 15),
                (10, 16),
                (10, 17),
                (10, 18),
                (11, 16),
                (11, 17),
                (11, 18),
                (5, 19),
                (5, 20),
                (5, 21),
                (6, 19),
                (6, 20),
                (6, 21),
            ]
            factory_ring = [
                (0, 2),
                (0, 3),
                (0, 4),
                (0, 5),
                (0, 6),
                (0, 7),
                (0, 8),
                (1, 8),
                (1, 9),
                (1, 10),
                (1, 11),
                (1, 12),
                (1, 13),
                (2, 13),
                (2, 14),
                (2, 15),
                (2, 16),
                (2, 17),
                (2, 18),
                (3, 18),
                (3, 19),
                (3, 20),
                (3, 21),
                (3, 22),
                (3, 23),
                (4, 23),
                (4, 24),
                (5, 24),
                (5, 25),
                (6, 25),
                (6, 24),
                (7, 24),
                (7, 23),
                (8, 23),
                (8, 22),
                (8, 21),
                (8, 20),
                (9, 20),
                (9, 21),
                (10, 21),
                (10, 22),
                (11, 22),
                (11, 21),
                (12, 21),
                (12, 20),
                (13, 20),
                (13, 19),
                (13, 18),
                (13, 17),
                (13, 16),
                (13, 15),
                (13, 14),
                (12, 14),
                (12, 13),
                (12, 12),
                (12, 11),
                (12, 10),
                (12, 9),
                (11, 9),
                (11, 8),
                (11, 7),
                (11, 6),
                (11, 5),
                (11, 4),
                (10, 4),
                (10, 3),
                (9, 3),
                (9, 2),
                (8, 2),
                (8, 3),
                (7, 3),
                (7, 2),
                (6, 2),
                (6, 1),
                (5, 1),
                (5, 2),
                (4, 2),
                (4, 1),
                (3, 1),
                (3, 0),
                (2, 0),
                (2, 1),
                (1, 1),
                (1, 2),
            ]
            nodes_to_remove = [
                (0, 1),
                (0, 0),
                (1, 0),
                (0, 9),
                (0, 10),
                (0, 11),
                (0, 12),
                (0, 13),
                (0, 14),
                (0, 15),
                (0, 16),
                (0, 17),
                (0, 18),
                (0, 19),
                (0, 20),
                (0, 21),
                (0, 22),
                (0, 23),
                (0, 24),
                (1, 14),
                (1, 15),
                (1, 16),
                (1, 17),
                (1, 18),
                (1, 19),
                (1, 20),
                (1, 21),
                (1, 22),
                (1, 23),
                (1, 24),
                (1, 25),
                (2, 19),
                (2, 20),
                (2, 21),
                (2, 22),
                (2, 23),
                (2, 24),
                (2, 25),
                (3, 24),
                (3, 25),
                (4, 25),
                (7, 25),
                (8, 25),
                (8, 24),
                (9, 22),
                (9, 23),
                (9, 24),
                (9, 25),
                (10, 23),
                (10, 24),
                (10, 25),
                (11, 23),
                (11, 24),
                (11, 25),
                (12, 23),
                (12, 22),
                (12, 24),
                (12, 25),
                (13, 21),
                (13, 22),
                (13, 23),
                (13, 24),
                (13, 13),
                (13, 12),
                (13, 11),
                (13, 10),
                (13, 9),
                (13, 8),
                (13, 7),
                (13, 6),
                (13, 5),
                (13, 4),
                (13, 3),
                (13, 2),
                (13, 1),
                (13, 0),
                (12, 0),
                (12, 1),
                (12, 2),
                (12, 3),
                (12, 4),
                (12, 5),
                (12, 6),
                (12, 7),
                (12, 8),
                (11, 3),
                (11, 2),
                (11, 1),
                (11, 0),
                (10, 0),
                (10, 1),
                (10, 2),
                (9, 0),
                (9, 1),
                (8, 0),
                (8, 1),
                (7, 0),
                (7, 1),
                (6, 0),
                (5, 0),
                (4, 0),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g

        else:
            raise NotImplementedError
    elif layout_type == "row":
        if num_qubits == 24:
            m = 11
            n = 6
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 5),
                (2, 6),
                (3, 6),
                (3, 5),
                (4, 5),
                (4, 6),
                (2, 9),
                (2, 10),
                (3, 10),
                (3, 9),
                (4, 9),
                (4, 10),
                (2, 13),
                (2, 14),
                (3, 14),
                (3, 13),
                (4, 13),
                (4, 14),
                (2, 17),
                (2, 18),
                (3, 18),
                (3, 17),
                (4, 17),
                (4, 18),
            ]
            factory_ring = (
                [
                    (1, 2),
                    (1, 1),
                    (2, 1),
                    (2, 2),
                    (3, 2),
                    (3, 1),
                    (4, 1),
                    (4, 2),
                    (5, 2),
                    (5, 3),
                    (1, 20),
                    (1, 21),
                    (2, 21),
                    (2, 22),
                    (3, 22),
                    (3, 21),
                    (4, 21),
                    (4, 22),
                    (5, 22),
                    (5, 21),
                ]
                + [(0, x) for x in range(2, 21)]
                + [(6, x) for x in range(3, 22)]
            )

            nodes_to_remove = [
                (0, 21),
                (0, 22),
                (1, 22),
                (1, 23),
                (2, 23),
                (3, 23),
                (4, 23),
                (5, 23),
                (6, 23),
                (6, 22),
                (0, 1),
                (0, 0),
                (1, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (5, 1),
                (6, 1),
                (6, 2),
            ]

            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g

        elif num_qubits == 42:
            m = 18
            n = 6
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 5),
                (2, 6),
                (3, 6),
                (3, 5),
                (4, 5),
                (4, 6),
                (2, 9),
                (2, 10),
                (3, 10),
                (3, 9),
                (4, 9),
                (4, 10),
                (2, 13),
                (2, 14),
                (3, 14),
                (3, 13),
                (4, 13),
                (4, 14),
                (2, 17),
                (2, 18),
                (3, 18),
                (3, 17),
                (4, 17),
                (4, 18),
                (2, 21),
                (2, 22),
                (3, 22),
                (3, 21),
                (4, 21),
                (4, 22),
                (2, 25),
                (2, 26),
                (3, 26),
                (3, 25),
                (4, 25),
                (4, 26),
                (2, 29),
                (2, 30),
                (3, 30),
                (3, 29),
                (4, 29),
                (4, 30),
            ]

            factory_ring = (
                [(0, x) for x in range(2, 33)]
                + [(6, x) for x in range(3, 34)]
                + [
                    (1, 32),
                    (1, 33),
                    (2, 33),
                    (2, 34),
                    (3, 34),
                    (3, 33),
                    (4, 33),
                    (4, 34),
                    (5, 34),
                    (5, 33),
                    (1, 2),
                    (1, 1),
                    (2, 1),
                    (2, 2),
                    (3, 2),
                    (3, 1),
                    (4, 1),
                    (4, 2),
                    (5, 2),
                    (5, 3),
                ]
            )

            nodes_to_remove = [
                (0, 1),
                (1, 0),
                (0, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (5, 1),
                (6, 1),
                (6, 2),
                (0, 33),
                (0, 34),
                (0, 35),
                (0, 36),
                (1, 34),
                (1, 35),
                (1, 36),
                (1, 37),
                (2, 35),
                (2, 36),
                (2, 37),
                (3, 35),
                (3, 36),
                (3, 37),
                (4, 35),
                (4, 36),
                (4, 37),
                (5, 35),
                (5, 36),
                (5, 37),
                (6, 34),
                (6, 35),
                (6, 36),
                (6, 37),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g
        elif num_qubits == 60:
            m = 23
            n = 6
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 5),
                (2, 6),
                (3, 6),
                (3, 5),
                (4, 5),
                (4, 6),
                (2, 9),
                (2, 10),
                (3, 10),
                (3, 9),
                (4, 9),
                (4, 10),
                (2, 13),
                (2, 14),
                (3, 14),
                (3, 13),
                (4, 13),
                (4, 14),
                (2, 17),
                (2, 18),
                (3, 18),
                (3, 17),
                (4, 17),
                (4, 18),
                (2, 21),
                (2, 22),
                (3, 22),
                (3, 21),
                (4, 21),
                (4, 22),
                (2, 25),
                (2, 26),
                (3, 26),
                (3, 25),
                (4, 25),
                (4, 26),
                (2, 29),
                (2, 30),
                (3, 30),
                (3, 29),
                (4, 29),
                (4, 30),
                (2, 33),
                (3, 34),
                (3, 34),
                (3, 33),
                (4, 33),
                (4, 34),
                (2, 37),
                (2, 38),
                (3, 38),
                (3, 37),
                (4, 37),
                (4, 38),
                (2, 41),
                (2, 42),
                (3, 42),
                (3, 41),
                (4, 41),
                (4, 42),
            ]

            factory_ring = (
                [(0, x) for x in range(2, 45)]
                + [(6, x) for x in range(3, 46)]
                + [
                    (1, 44),
                    (1, 45),
                    (2, 45),
                    (2, 46),
                    (3, 46),
                    (3, 45),
                    (4, 45),
                    (4, 46),
                    (5, 46),
                    (5, 45),
                    (1, 2),
                    (1, 1),
                    (2, 1),
                    (2, 2),
                    (3, 2),
                    (3, 1),
                    (4, 1),
                    (4, 2),
                    (5, 2),
                    (5, 3),
                ]
            )

            nodes_to_remove = [
                (0, 1),
                (1, 0),
                (0, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (5, 1),
                (6, 1),
                (6, 2),
                (0, 45),
                (0, 46),
                (1, 46),
                (1, 47),
                (2, 47),
                (3, 47),
                (4, 47),
                (5, 47),
                (6, 47),
                (6, 46),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g
        else:
            raise NotImplementedError
    elif layout_type == "pair":
        if num_qubits == 24:
            m = 11
            n = 8
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 5),
                (2, 6),
                (4, 5),
                (4, 6),
                (6, 5),
                (6, 6),
                (2, 9),
                (2, 10),
                (4, 9),
                (4, 10),
                (6, 9),
                (6, 10),
                (2, 13),
                (2, 14),
                (4, 13),
                (4, 14),
                (6, 13),
                (6, 14),
                (2, 17),
                (2, 18),
                (4, 17),
                (4, 18),
                (6, 17),
                (6, 18),
            ]

            factory_ring = (
                [(0, x) for x in range(2, 21)]
                + [(8, x) for x in range(3, 22)]
                + [
                    (1, 20),
                    (1, 21),
                    (2, 21),
                    (2, 21),
                    (2, 22),
                    (3, 22),
                    (3, 21),
                    (4, 21),
                    (4, 22),
                    (5, 22),
                    (5, 21),
                    (6, 21),
                    (6, 22),
                    (7, 22),
                    (7, 21),
                    (1, 2),
                    (1, 1),
                    (2, 1),
                    (2, 2),
                    (3, 2),
                    (3, 1),
                    (3, 1),
                    (4, 1),
                    (4, 2),
                    (5, 2),
                    (5, 1),
                    (6, 1),
                    (6, 2),
                    (7, 2),
                    (7, 3),
                    (7, 2),
                    (7, 3),
                ]
            )

            nodes_to_remove = [
                (0, 21),
                (0, 22),
                (1, 22),
                (1, 23),
                (2, 23),
                (3, 23),
                (4, 23),
                (5, 23),
                (6, 23),
                (7, 23),
                (8, 23),
                (8, 22),
                (0, 1),
                (0, 0),
                (1, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (6, 0),
                (7, 0),
                (7, 1),
                (8, 1),
                (8, 2),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g
        elif num_qubits == 42:
            m = 17
            n = 8
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 5),
                (2, 6),
                (4, 5),
                (4, 6),
                (6, 5),
                (6, 6),
                (2, 9),
                (2, 10),
                (4, 9),
                (4, 10),
                (6, 9),
                (6, 10),
                (2, 13),
                (2, 14),
                (4, 13),
                (4, 14),
                (6, 13),
                (6, 14),
                (2, 17),
                (2, 18),
                (4, 17),
                (4, 18),
                (6, 17),
                (6, 18),
                (2, 21),
                (2, 22),
                (4, 21),
                (4, 22),
                (6, 21),
                (6, 22),
                (2, 25),
                (2, 26),
                (4, 25),
                (4, 26),
                (6, 25),
                (6, 26),
                (2, 29),
                (2, 30),
                (4, 29),
                (4, 30),
                (6, 29),
                (6, 30),
            ]

            factory_ring = (
                [(0, x) for x in range(2, 33)]
                + [(8, x) for x in range(3, 34)]
                + [
                    (1, 32),
                    (1, 33),
                    (2, 33),
                    (2, 32),
                    (3, 32),
                    (3, 33),
                    (4, 33),
                    (4, 32),
                    (5, 33),
                    (6, 33),
                    (6, 34),
                    (7, 34),
                    (7, 33),
                    (1, 2),
                    (1, 1),
                    (2, 1),
                    (2, 2),
                    (3, 2),
                    (3, 1),
                    (3, 1),
                    (4, 1),
                    (4, 2),
                    (5, 2),
                    (5, 1),
                    (6, 1),
                    (6, 2),
                    (7, 2),
                    (7, 3),
                    (7, 2),
                    (7, 3),
                ]
            )

            nodes_to_remove = [
                (0, 33),
                (0, 34),
                (1, 34),
                (1, 35),
                (2, 35),
                (2, 34),
                (3, 34),
                (3, 35),
                (4, 35),
                (4, 34),
                (5, 34),
                (5, 35),
                (6, 35),
                (7, 35),
                (8, 35),
                (8, 34),
                (0, 1),
                (0, 0),
                (1, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (6, 0),
                (7, 0),
                (7, 1),
                (8, 1),
                (8, 2),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g
        elif num_qubits == 60:
            m = 23
            n = 8
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 5),
                (2, 6),
                (4, 5),
                (4, 6),
                (6, 5),
                (6, 6),
                (2, 9),
                (2, 10),
                (4, 9),
                (4, 10),
                (6, 9),
                (6, 10),
                (2, 13),
                (2, 14),
                (4, 13),
                (4, 14),
                (6, 13),
                (6, 14),
                (2, 17),
                (2, 18),
                (4, 17),
                (4, 18),
                (6, 17),
                (6, 18),
                (2, 21),
                (2, 22),
                (4, 21),
                (4, 22),
                (6, 21),
                (6, 22),
                (2, 25),
                (2, 26),
                (4, 25),
                (4, 26),
                (6, 25),
                (6, 26),
                (2, 29),
                (2, 30),
                (4, 29),
                (4, 30),
                (6, 29),
                (6, 30),
                (2, 33),
                (2, 34),
                (4, 33),
                (4, 34),
                (6, 33),
                (6, 34),
                (2, 37),
                (2, 38),
                (4, 37),
                (4, 38),
                (6, 37),
                (6, 38),
                (2, 41),
                (2, 42),
                (4, 41),
                (4, 42),
                (6, 41),
                (6, 42),
            ]

            factory_ring = (
                [(0, x) for x in range(2, 45)]
                + [(8, x) for x in range(3, 46)]
                + [
                    (1, 44),
                    (1, 45),
                    (2, 45),
                    (2, 46),
                    (3, 46),
                    (3, 45),
                    (4, 45),
                    (4, 46),
                    (5, 46),
                    (5, 45),
                    (6, 45),
                    (6, 46),
                    (7, 46),
                    (7, 45),
                    (1, 2),
                    (1, 1),
                    (2, 1),
                    (2, 2),
                    (3, 2),
                    (3, 1),
                    (3, 1),
                    (4, 1),
                    (4, 2),
                    (5, 2),
                    (5, 1),
                    (6, 1),
                    (6, 2),
                    (7, 2),
                    (7, 3),
                    (7, 2),
                    (7, 3),
                ]
            )

            nodes_to_remove = [
                (0, 45),
                (0, 46),
                (1, 46),
                (1, 47),
                (2, 47),
                (3, 47),
                (4, 47),
                (5, 47),
                (6, 47),
                (7, 47),
                (8, 47),
                (8, 46),
                (0, 1),
                (0, 0),
                (1, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (6, 0),
                (7, 0),
                (7, 1),
                (8, 1),
                (8, 2),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g
        else:
            raise NotImplementedError

    elif layout_type == "sparse":
        if num_qubits == 24:
            m = 15
            n = 9
            lat = co.HexagonalLattice(m, n)
            data_qubit_locs = [
                (2, 5),
                (4, 5),
                (6, 5),
                (3, 8),
                (5, 8),
                (7, 8),
                (2, 11),
                (4, 11),
                (6, 11),
                (3, 14),
                (5, 14),
                (7, 14),
                (2, 17),
                (4, 17),
                (6, 17),
                (3, 20),
                (5, 20),
                (7, 20),
                (2, 23),
                (4, 23),
                (6, 23),
                (3, 26),
                (5, 26),
                (7, 26),
            ]

            factory_ring = [(0, x) for x in range(2, 27)] + [
                (1, 2),
                (1, 1),
                (2, 1),
                (2, 2),
                (3, 2),
                (3, 1),
                (3, 1),
                (4, 1),
                (4, 2),
                (5, 2),
                (5, 1),
                (6, 1),
                (6, 2),
                (7, 2),
                (7, 3),
                (7, 2),
                (7, 3),
                (8, 3),
                (8, 4),
                (8, 5),
                (8, 6),
                (9, 6),
                (9, 7),
                (9, 8),
                (9, 9),
                (9, 10),
                (8, 10),
                (8, 11),
                (8, 12),
                (9, 12),
                (9, 13),
                (9, 14),
                (9, 15),
                (9, 16),
                (8, 16),
                (8, 17),
                (8, 18),
                (9, 18),
                (9, 19),
                (9, 20),
                (9, 21),
                (9, 22),
                (8, 22),
                (8, 23),
                (8, 24),
                (9, 24),
                (9, 25),
                (9, 26),
                (9, 27),
                (9, 28),
                (8, 28),
                (8, 29),
                (7, 29),
                (7, 30),
                (6, 30),
                (6, 29),
                (5, 29),
                (5, 30),
                (4, 30),
                (4, 29),
                (3, 29),
                (3, 30),
                (2, 30),
                (2, 29),
                (1, 29),
                (1, 28),
                (1, 27),
                (1, 26),
            ]

            nodes_to_remove = [
                (0, 27),
                (0, 28),
                (0, 29),
                (0, 30),
                (1, 30),
                (1, 31),
                (2, 31),
                (3, 31),
                (4, 31),
                (5, 31),
                (6, 31),
                (7, 31),
                (8, 31),
                (8, 30),
                (0, 1),
                (0, 0),
                (1, 0),
                (2, 0),
                (3, 0),
                (4, 0),
                (5, 0),
                (6, 0),
                (7, 0),
                (7, 1),
                (8, 1),
                (8, 2),
                (8, 0),
                (9, 0),
                (9, 1),
                (9, 2),
                (9, 3),
                (9, 4),
                (9, 5),
                (9, 11),
                (9, 17),
                (9, 23),
                (9, 29),
                (9, 30),
                (9, 31),
            ]
            lat.G.remove_nodes_from(nodes_to_remove)
            g, _, _ = filter_factory_nodes(lat.G, factory_ring, factories)
            lat.G = g
        else:
            raise NotImplementedError
    else:
        raise NotImplementedError

    # need to remove nodes between directly neighboring logical patches. a path between two directly neighboring edges would be wrong, because one cannot use an ancilla in between
    for data_qubit in data_qubit_locs:
        neighbours: list[tuple[int, int]] = list(g.neighbors(data_qubit))
        for neigh in neighbours:
            if neigh in data_qubit_locs:  # if a neighbor is also a logical qubit
                g.remove_edges_from([(data_qubit, neigh), (neigh, data_qubit)])
    lat.G = g

    return lat.G, data_qubit_locs, factory_ring


def remove_edge_per_factory(g: nx.Graph, factories: list[tuple[int, int]]) -> nx.Graph:
    """Needed for folded surface code substrate.

    Since in folded surface code substrate, the factories are considered to be patches of standard surface codes,
    one is allowed only to route to ONE boundary of the surface code patch which hosts the T state.
    Therefore, the factory node is allowed to be connected with the remainder only with ONE edge.
    We remove a random edge per factory, since we can just place the X boundary accordingly and we do not care about what happens outside

    Maybe remove the node directly, because then, you can ensure that this spot is free for the magic state distillery

    Args:
        g (nx.Graph): _description_
        factories (list[tuple[int,int]]): _description_
    """
    for factory in factories:
        # find neighbors, make sure that there are 2
        neighbors = list(g.neighbors(factory))
        assert len(neighbors) == 2, "your factory has access to more than 2 neighboring nodes which is a little weird"

        # choose a random of those neighbors
        node = random.choice(neighbors)  # noqa: S311

        # remove the corresponding edge from g
        # if (node, factory) in g.edges():
        #    g.remove_edge(node,factory)
        # elif (factory, node) in g.edges():
        #    g.remove_edge(factory,node)
        if (node, factory) in g.edges() or (factory, node) in g.edges:
            g.remove_node(node)
        else:
            msg = "Considered edge to remove not in graph."
            raise ValueError(msg)

    return g
