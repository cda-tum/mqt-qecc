[build-system]
requires = ["scikit-build-core>=0.6.1", "setuptools-scm>=7", "pybind11>=2.12"]
build-backend = "scikit_build_core.build"

[project]
name = "mqt.qecc"
description = "QECC - An MQT Tool for Quantum Error Correcting Codes"
readme = "README.md"
authors = [
    { name = "Lucas Berent", email = "lucas.berent@tum.de" },
    { name = "Lukas Burgholzer", email = "lukas.burgholzer@tum.de" },
    { name = "Peter-Jan H.S. Derks", email = "peter-janderks@hotmail.com" },
    { name = "Timo Hillmann", email = "timo.hillmann@rwth-aachen.de"}
]
keywords = ["MQT", "quantum-computing", "error-correction", "MaxSAT", "QLDPC"]
license = { file = "LICENSE" }

classifiers = [
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: C++",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 5 - Production/Stable",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "z3-solver>=4.11,<4.14",
    "qecsim",
    "ldpc>=0.1.50",
    "numpy",
    "qiskit[qasm3-import]>=1.0.0",
    "qiskit-aer>=0.14.0",
    "bposd",
    "numba",
    "pymatching",
]
dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest>=7", "pytest-console-scripts>=1.4", "pytest-mock"]
coverage = ["mqt.qecc[test]", "pytest-cov"]
docs = [
    "furo>=2023.08.17",
    "sphinx",
    "setuptools-scm>=7",
    "sphinxcontrib-bibtex>=2.4.2",
    "sphinx-copybutton",
    "sphinx-hoverxref",
    "pybtex>=0.24",
    "ipython",
    "ipykernel",
    "nbsphinx",
    "sphinxext-opengraph",
    "sphinx-autodoc-typehints",
    "qiskit[visualization]",
]
visualization = ["matplotlib", "scipy"]
dev = ["mqt.qecc[coverage, docs, visualization]"]

[project.scripts]
"ecc_qiskit_wrapper" = "mqt.qecc.ecc_qiskit_wrapper:main"
"mqt.qecc.cc-decoder" = "mqt.qecc.cc_decoder.cli:cli"
"mqt.qecc.cc-decoder-plot" = "mqt.qecc.cc_decoder.plots:main"

[project.urls]
Homepage = "https://github.com/cda-tum/mqt-qecc"
Documentation = "https://github.com/cda-tum/mqt-qecc"
Issues = "https://github.com/cda-tum/mqt-qecc/issues"
Discussions = "https://github.com/cda-tum/mqt-qecc/discussions"

[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.6.1"

# Set the target to build
cmake.targets = ["pyqecc"]

# Set required CMake and Ninja versions
cmake.minimum-version = "3.19"
ninja.minimum-version = "1.10"

# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

# Build stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"

# Explicitly set the package directory
wheel.packages = ["src/mqt"]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/mqt/qecc/_version.py"]
sdist.exclude = [
    "**/.github",
    "**/doc",
    "**/docs",
    "**/meta",
    "**/plots",
    "**/test",
    "**/tests",
    "extern/mqt-core/extern/json/include",
    "extern/mqt-core/extern/googletest",
    "extern/mqt-core/extern/boost/config/checks",
    "extern/mqt-core/extern/boost/config/tools",
    "extern/mqt-core/extern/boost/multiprecision/config",
    "extern/mqt-core/extern/boost/multiprecision/example",
    "extern/mqt-core/extern/boost/multiprecision/performance",
    "extern/mqt-core/extern/boost/multiprecision/tools"
]

[tool.scikit-build.cmake.define]
BUILD_MQT_QECC_TESTS = "OFF"
BUILD_MQT_QECC_BINDINGS = "ON"
ENABLE_IPO = "ON"


[tool.check-sdist]
sdist-only = ["src/mqt/qecc/_version.py"]
git-only = [
    "docs/*",
    "extern/*",
    "examples/*",
    "test/*",
    ".idea/*",
]


[tool.setuptools_scm]
write_to = "src/mqt/qecc/_version.py"

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["test/python"]
addopts = ["-ra", "--strict-markers", "--strict-config", "--showlocals"]
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    "error",
    "ignore:.*pkg_resources.*:DeprecationWarning:",
    "ignore:.*qiskit.__qiskit_version__.*:DeprecationWarning:qiskit:",
    "ignore:.*qiskit.utils.algorithm_globals.QiskitAlgorithmGlobals*:DeprecationWarning:qiskit",
    "ignore:.*Building a flow controller with keyword arguments is going to be deprecated*:PendingDeprecationWarning:qiskit",
    "ignore:.*qiskit.extensions module is pending deprecation*:PendingDeprecationWarning:qiskit",
    "ignore:.*The retworkx package is deprecated*:DeprecationWarning:pymatching",
    'ignore:.*qiskit.utils.parallel*:DeprecationWarning:qiskit',
    'ignore:.*qiskit.tools.events*:DeprecationWarning:qiskit',
    'ignore:.*qiskit.qasm*:DeprecationWarning:qiskit',
    'ignore:.*Qiskit with Python 3.8.*:DeprecationWarning:',
    'ignore:.*qiskit.providers.provider.Provider.*:DeprecationWarning:',
]

[tool.coverage]
run.source = ["mqt.qecc"]
report.exclude_also = [
    '\.\.\.',
    'if TYPE_CHECKING:',
]

[tool.mypy]
files = ["src/mqt", "test/python"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/src"]
python_version = "3.8"
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
explicit_package_bases = true
pretty = true
exclude = [
    "code_construction*",
    "^data_utils\\.py$"
]

[[tool.mypy.overrides]]
module = ["qiskit.*", "qecsim.*","qiskit_aer.*", "matplotlib.*", "scipy.*", "ldpc.*", "pytest_console_scripts.*",
    "z3.*", "bposd.*", "numba.*", "pymatching.*"]
ignore_missing_imports = true


[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]
src = ["src"]
preview = true
unsafe-fixes = true

[tool.ruff.lint]
exclude = [
    "scripts/*",
    "*/cc_decoder/plots.py",
    "*/analog_information_decoding/code_construction/*",
    "*/analog_information_decoding/utils/data_utils.py",

]
extend-select = [
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "FLY",         # flynt
    "FURB",        # refurb
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "LOG",         # flake8-logging-format
    "N",           # flake8-naming
    "NPY",         # numpy
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "S",           # flake8-bandit
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "TCH",         # flake8-type-checking
    "TID251",      # flake8-tidy-imports.banned-api
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ISC001",  # Conflicts with formatter
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "PT004",   # Incorrect, just usefixtures instead.
    "S101",    # Use of assert detected
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"typing.Self".msg = "Use scikit_build_core._compat.typing.Self instead."
"typing_extensions.Self".msg = "Use scikit_build_core._compat.typing.Self instead."
"typing.assert_never".msg = "Use scikit_build_core._compat.typing.assert_never instead."
"importlib.resources".msg = "Use scikit_build_core._compat.importlib.resources instead."
"importlib_resources".msg = "Use scikit_build_core._compat.importlib.resources instead."

[tool.ruff.lint.per-file-ignores]
"test/python/**" = ["T20", "ANN"]
"docs/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux*"
archs = "auto64"
test-command = "python -c \"from mqt import qecc\""
test-skip = "*-macosx_arm64 cp312-*"
build-frontend = "build"

[tool.cibuildwheel.linux]
before-all = [
    "yum -y install mpfr-devel",
    "git clone --branch v2.9.0 --depth 1 https://github.com/flintlib/flint2.git",
    "cd flint2 && ./configure && make -j 3 && make install"
]
environment = { DEPLOY = "ON" }

[tool.cibuildwheel.macos]
archs = "x86_64"
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15" }

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -v -w {dest_dir} {wheel}"
environment = { CMAKE_GENERATOR = "Ninja" }
