name: üêç ‚Ä¢ CI

on:
  workflow_call:

env:
  FORCE_COLOR: 3

jobs:
  lint:
    runs-on: ubuntu-latest
    name: üö® Lint
    steps:
      - uses: actions/checkout@v4
      # set up ccache for faster C++ builds
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          prepend_symlinks_to_path: false
          override_cache_key: lint
      # set up mold as linker for faster C++ builds
      - name: Set up mold as linker
        uses: rui314/setup-mold@v1
      # set up uv for faster Python package management
      - uses: yezz123/setup-uv@v4
      # set up nox for convenient linting
      - uses: wntrblm/nox@2024.04.15
        with:
          python-versions: "3.12"
      # run the nox lint session (assumes a nox session named "lint" exists, and `mypy` is configured in pre-commit)
      - name: Run mypy
        run: nox -s lint -- mypy
      # run check-sdist to ensure the package sdist is correct
      - name: Run check-sdist
        run: pipx run check-sdist --inject-junk

  python-tests:
    name: üêç ${{ matrix.python-version }} Tests on ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        include:
          - runs-on: macos-13
            python-version: "3.9"
          - runs-on: macos-13
            python-version: "3.12"
          - runs-on: macos-14
            python-version: "3.9"
          - runs-on: macos-14
            python-version: "3.12"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          override_cache_key: python-tests-${{ matrix.runs-on }}-${{ matrix.python-version }}
      # set up mold as linker for faster C++ builds (Linux only)
      - name: Set up mold as linker (Linux only)
        uses: rui314/setup-mold@v1
      # set up uv for faster Python package management
      - uses: yezz123/setup-uv@v4
      # set up nox for convenient testing
      - uses: wntrblm/nox@2024.04.15
        with:
          python-versions: ${{ matrix.python-version }}
      # run the nox minimums session (assumes a nox session named "minimums" exists) with coverage
      - name: Test on üêç ${{ matrix.python-version }} with minimal versions
        run: nox -s minimums-${{ matrix.python-version }} --verbose -- --cov --cov-report=xml:coverage-${{ matrix.python-version }}-${{ matrix.runs-on }}.xml
      # run the nox tests session (assumes a nox session named "tests" exists) with coverage
      - name: Test on üêç ${{ matrix.python-version }}
        run: nox -s tests-${{ matrix.python-version }} --verbose -- --cov --cov-report=xml:coverage-${{ matrix.python-version }}-${{ matrix.runs-on }}.xml --cov-append
      # upload the report as an artifact to GitHub so that it can later be uploaded to Codecov
      - name: Upload coverage report for üêç ${{ matrix.python-version }} on ${{ matrix.runs-on }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.runs-on }}
          path: coverage-*

  python-coverage-upload:
    name: üìà
    needs: [python-tests]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      # check out the repository (mostly for the codecov config)
      - uses: actions/checkout@v4
      # download coverage reports from all jobs
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: coverage-reports
          merge-multiple: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          flags: python
          use_oidc: true
